#!/usr/bin/python3

# dmedia: distributed media library
# Copyright (C) 2011 Novacut Inc
# 
# This file is part of `dmedia`.
# 
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
# 
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
# 
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>


import sys
import optparse
from os import path
from datetime import date
from gettext import gettext as _

from gi.repository import GObject

from filestore import DOTNAME
import dmedia
from dmedia import schema
from dmedia.util import get_db, get_project_db
from dmedia.units import bytes10
from dmedia.service.api import DMedia
from dmedia.importer import ImportManager, notify_stats


# Default project name if project_id isn't supplied
name = _('Migrated {date}').format(date=date.today().strftime('%a, %d %b %Y'))

parser = optparse.OptionParser(
    usage='%prog DIRECTORY',
)
parser.add_option('--project',
    metavar='ID',
    help='ID of existing project (otherwise creates new one)',
    default=None,
)
parser.add_option('--name',
    help='name of new project; default is {!r}'.format(name),
    default=name,
)
parser.add_option('--list',
    help='list existing projects and exit',
    action='store_true',
    default=False,
)
(options, args) = parser.parse_args()


if options.list:
    api = DMedia()
    db = get_db(api.GetEnv())
    for row in db.view('project', 'title')['rows']:
        print('  {}  {}'.format(row['id'], row['key']))
    sys.exit(0)
if len(args) != 1:
    print('takes exactly one argument DIRECTORY')
    sys.exit(1)
basedir = path.abspath(args[0])
if not path.isdir(basedir):
    print('not a directory: {!r}'.format(basedir))
    sys.exit(1)


api = DMedia()
env = api.GetEnv()
if options.project:
    project_id = options.project
else:
    doc = schema.create_project(options.name)
    project_id = doc['_id']
    db = get_db(env)
    db.post(doc)
    project = get_project_db(doc['_id'], env, True)
    project.save(doc)
env['project_id'] = project_id

GObject.threads_init()
mainloop = GObject.MainLoop()


def callback(signal, args):
    if signal == 'error':
        print(signal, args)
        mainloop.quit()

    elif signal == 'batch_finished':
        (batch_id, stats, copies, msg) = args

        db = get_db(env)
        doc = db.get(batch_id)
        print('\nFiles stored in:')
        for parentdir in sorted(doc['stores']):
            print('  {}'.format(path.join(parentdir, DOTNAME)))
        print('Total durability is copies={}'.format(doc['copies']))
        elapsed = doc['time_end'] - doc['time']
        rate = stats['total']['bytes'] / elapsed
        print('Imported at {} per second'.format(bytes10(rate)))

        (summary, body) = notify_stats(stats)
        print('')
        if summary:
            print(summary)
        if body:
            print(body)
        print('')
        print('Imported into project {}'.format(project_id))
 
        mainloop.quit()
    elif signal == 'batch_progress':
        (count, total_count, size, total_size) = args
        print('File {} of {}, {} of {}'.format(
                count, total_count, bytes10(size), bytes10(total_size))
        )

dmedia.configure_logging()
manager = ImportManager(env, callback)
manager.start_import(basedir)
mainloop.run()

