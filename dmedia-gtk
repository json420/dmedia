#!/usr/bin/python3

# dmedia: distributed media library
# Copyright (C) 2011 Novacut Inc
# 
# This file is part of `dmedia`.
# 
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
# 
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
# 
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

import json
import logging
import sys
import time
from copy import deepcopy

from userwebkit import BaseApp
from microfiber import NotFound, Database
from filestore import statvfs
from gi.repository import GLib, Gtk, Gio

import dmedia
from dmedia.util import get_project_db, isfilestore
from dmedia.misc import WeakMethod
from dmedia import views
from dmedia import schema
from dmedia.gtk.util import Timer
from dmedia.service import init_if_needed
from dmedia.importer import ImportManager, has_magic_lantern

try:
    from dmedia.gtk.ubuntu import UnityImportUX
except ImportError:
    UnityImportUX = None


log = dmedia.configure_logging()
init_if_needed()


def on_eject(mount, result, data):
    log.info('finishing eject: %r', mount.get_root().get_path())
    mount.eject_with_operation_finish(result)


def eject(mount):
    log.info('finishing eject: %r', mount.get_root().get_path())
    mount.eject_with_operation(0, None, None, on_eject, None)


class Importer:
    def __init__(self, env, proxy, hub):
        super().__init__()
        self.env = env
        self.project_id = env['project_id']
        self.blocking = False
        self.mounts = {}
        self.proxy = proxy

        self.vm = Gio.VolumeMonitor.get()
        self.vm.connect('mount-added', WeakMethod(self, 'on_mount_added'))
        self.vm.connect('mount-removed', WeakMethod(self, 'on_mount_removed'))

        self.hub = hub
        self.hub.connect('batch_finished',
            WeakMethod(self, 'on_batch_finished')
        )
        self.manager = ImportManager(env, WeakMethod(self, 'callback'))
        local = self.manager.db.get('_local/dmedia')
        self.auto_format = local.get('auto_format', False)
        log.info('auto_format=%r', self.auto_format)
        self.settings = Gio.Settings('org.gnome.desktop.media-handling')
        self.autorun_never = self.settings.get_boolean('autorun-never')
        if not self.autorun_never:
            log.info("setting 'autorun-never' from False to True")
            self.settings.set_boolean('autorun-never', True)

    def __del__(self):
        self.reset()

    def reset(self):
        if not self.autorun_never:
            log.info("resetting 'autorun-never' to False")
            self.settings.set_boolean('autorun-never', False)

    def callback(self, signal, args):
        GLib.idle_add(self.hub.send, signal, *args)

    def on_batch_finished(self, hub, batch_id, stats, copies, msg):
        log.info('batch_finished: %s', batch_id)
        log.info('Calling Dmedia.SnapshotProject(%r)...', self.project_id)
        #self.proxy.SnapshotProject(self.project_id)
        self.blocking = True
        self.batch_id = batch_id
        self.copies = copies
        self.stats = stats
        self.msg = msg
        mounts = tuple(self.mounts.values())
        for mount in mounts:
            eject(mount)

    def on_mount_added(self, vm, mount):
        basedir = mount.get_root().get_path()
        log.info('mount_added: %r', basedir)
        if basedir is None:
            log.warning('basedir is None, skipping possible blank optical media')
            return
        if isfilestore(basedir):
            log.warning('%r is a filestore, skipping')
            return
        if self.blocking:
            log.warning('Blocking, ignoring card-insert %r', basedir)
            return
        info = {
            'partition': {
                'label': mount.get_name(),
                'bytes': statvfs(basedir).size, 
            },
        }
        assert basedir not in self.mounts
        self.mounts[basedir] = mount
        self.manager.start_import(basedir, info)

    def on_mount_removed(self, vm, mount):
        basedir = mount.get_root().get_path()
        log.info('mount_removed: %r', basedir)
        if basedir is None:
            log.warning('basedir is None, skipping possible blank optical media')
            return
        if self.mounts.pop(basedir, None) and len(self.mounts) == 0:
            log.info('emitting batch_finalized to UI')
            self.hub.send('batch_finalized',
                self.batch_id, self.stats, self.copies, self.msg
            )
            self.blocking = False


class App(BaseApp):
    name = 'dmedia'
    dbname = schema.DB_NAME
    version = dmedia.__version__
    title = 'Dmedia'
    page = 'index.html'
    title = 'Dmedia'
    proxy_bus = dmedia.BUS
    importer = None

    signals = {
        'create_project': ['title'],
        'project_created': ['project_id', 'title'],
        'start_importer': ['project_id'],
        'importer_started': ['doc'],
        'stop_importer': [],
        'importer_stopped': [],

        'batch_started': ['batch_id'],
        'import_started': ['basedir', 'import_id', 'extra'],
        'import_scanned': ['basedir', 'import_id', 'total_count', 'total_size'],
        'import_thumbnail': ['basedir', 'import_id', 'doc_id'],
        'batch_progress': ['count', 'total_count', 'size', 'total_size'],
        'batch_finished': ['batch_id', 'stats', 'copies', 'notification'],
        'batch_finalized': ['batch_id', 'stats', 'copies', 'notification'],
        'error': ['error_dict'],
    }

    def connect_hub_signals(self, hub):
        hub.connect('create_project', self.on_create_project)
        hub.connect('start_importer', self.on_start_importer)
        hub.connect('stop_importer', self.on_stop_importer)
        hub.connect('error', self.on_error)

    def dmedia_resolver(self, _id):
        return self.proxy.Resolve(_id)

    def create_ux(self):
        if UnityImportUX is not None:
            self.ux = UnityImportUX(self.hub)
            assert sys.getrefcount(self.ux) == 2

    def destroy_ux(self):
        self.ux = None

    def on_error(self, hub, error):
        self.window.present()
        dialog = Gtk.MessageDialog(
            self.window,
            0,
            Gtk.MessageType.ERROR,
            Gtk.ButtonsType.CLOSE,
            'An error occured during the import!\nYour files have not been imported!'
        )
        dialog.run()
        dialog.destroy()

    def on_create_project(self, hub, title):
        doc = schema.create_project(title)
        project = get_project_db(doc['_id'], self.env, True)
        project.post(doc)
        self.db.save(doc)
        GLib.idle_add(self.start_importer, doc)

    def on_start_importer(self, hub, project_id):
        name = schema.project_db_name(project_id)
        pdb = Database(name, ctx=self.db.ctx)
        pdoc = pdb.get(project_id, attachments=True)
        pdoc['atime'] = time.time()
        pdb.save(pdoc)
        try:
            doc = self.db.get(project_id)
            pdoc['_rev'] = doc['_rev']
        except NotFound:
            del pdoc['_rev']
        self.db.save(pdoc)
        GLib.idle_add(self.start_importer, pdoc)

    def start_importer(self, doc):    
        try:
            env = deepcopy(self.env)
            env['project_id'] = doc['_id']
            self.importer = Importer(env, self.proxy, self.hub)
            assert sys.getrefcount(self.importer) == 2
            self.create_ux()
            self.hub.send('importer_started', doc)
        except Exception as e:
            log.exception('exception in on_start_importer()')
            raise e

    def on_stop_importer(self, hub):
        self.importer.manager.kill()
        self.importer = None
        self.ux = None
        GLib.idle_add(self.hub.send, 'importer_stopped')


app = App()
try:
    app.run()
finally:
    if app.importer is not None:
        app.importer.reset()
