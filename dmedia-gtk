#!/usr/bin/python3

# dmedia: distributed media library
# Copyright (C) 2011 Novacut Inc
# 
# This file is part of `dmedia`.
# 
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
# 
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
# 
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

import optparse
import json
import logging
import sys

import dmedia
from dmedia.gtk import GObject, Gtk
from dmedia.service.dbus import Ejector, Formatter, UDisks, WeakCallback
from dmedia.service.dbus import extra_info, session
from dmedia.importer import ImportManager
from dmedia.service.wrappers import ImportWrapper
from dmedia.gtk.ubuntu import UnityImportUX


log = logging.getLogger()


class ActiveImport(Gtk.VBox):
    def __init__(self):
        super().__init__()
        self._progressbar = Gtk.ProgressBar()
        self.pack_start(self._progressbar, False, False, 2)
        
    def _set_gmanager(self, gmanager):
        gmanager.connect('batch_progress', self._on_batch_progress)

    def _on_batch_progress(self, gm, count, total_count, size, total_size):
        progress = (0.0 if total_size == 0 else size / total_size)
        self._progressbar.set_property('fraction', progress)


class Importer:
    def __init__(self, env):
        super().__init__()
        self.env = env
        self.udisks = UDisks()
        self.udisks.monitor()
        self.udisks.connect('card_inserted',
            WeakCallback(self, 'on_card_inserted')
        )
        #self.blocking = False
        #self.cards = []
        self.wrapper = ImportWrapper()
        #self.wrapper.set_handler('batch_finished', self.handle_batch_finished)
        #self.manager = ImportManager(env, self.wrapper.callback)
        self.ux = UnityImportUX(self.wrapper)

    def handle_batch_finished(self, batch_id, stats, copies):
        Worker = (Formatter if copies >= 2 else Ejector)
        self.blocking = True
        self.batch_id = batch_id
        self.copies = copies
        self.stats = stats
        self.workers = dict(
            (obj, Worker(obj, self.on_complete))
            for obj in self.cards
        )
        self.cards = []
        for worker in self.workers.values():
            worker.run()

    def on_complete(self, worker, obj):
        log.info('Completed: %r', worker)
        w = self.workers.pop(obj)
        assert worker is w
        if len(self.workers) == 0:
            self.blocking = False
            log.info('emitting batch_finished to UI')
            self.wrapper.emit_mainthread(
                'batch_finished', self.batch_id, self.stats, self.copies
            )

    def on_card_inserted(self, udisks, obj, parentdir, partition, drive):
        if self.blocking:
            log.warning('Blocking, ignoring card-insert %r', obj)
            return
        log.info('card-insert %r', obj)
        self.cards.append(obj)
        info = extra_info(partition, drive)
        self.manager.start_import(parentdir, info)


class UI:
    def __init__(self, benchmark=False):
        self.benchmark = benchmark
        self.window = Gtk.Window()
        self.window.connect('destroy', Gtk.main_quit)
        self.window.set_default_size(960, 540)
        self.window.set_title('DMedia')
        self.notebook = Gtk.Notebook()
        self.window.add(self.notebook)
        self.importer = None
        self.importer_tab = self.append_page('Importer')
        button = Gtk.Button('Start Importer')
        button.connect('clicked', self.on_clicked)
        self.importer_tab.pack_start(button, False, False, 0)
        self.append_page('Library')
        self.append_page('Storage')

    def append_page(self, text, child=None):
        if child is None:
            child = Gtk.VBox()
        label = Gtk.Label(text)
        label.set_padding(8, 2)
        self.notebook.append_page(child, label)
        return child

    def run(self):
        self.window.show_all()
        GObject.idle_add(self.on_idle)
        Gtk.main()

    def on_idle(self):
        if self.benchmark:
            Gtk.main_quit()
            return
        session.get_async(self.on_proxy, 'org.freedesktop.DMedia', '/')

    def on_proxy(self, proxy, async_result, *args):
        self.proxy = proxy
        self.env = json.loads(self.proxy.GetEnv())

    def on_clicked(self, button):
        if self.importer is None:
            self.importer = Importer(self.env)
        else:
            self.importer = None
        


parser = optparse.OptionParser(version=dmedia.__version__)
parser.add_option('--benchmark',
    help='benchmark app startup time',
    action='store_true',
    default=False,
)
(options, args) = parser.parse_args()

dmedia.configure_logging()
ui = UI(options.benchmark)
ui.run()
