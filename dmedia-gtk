#!/usr/bin/env python

# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>
#   David Green <david4dev@gmail.com>
#
# dmedia: distributed media library
# Copyright (C) 2010, 2011 Jason Gerard DeRose <jderose@novacut.com>
#
# This file is part of `dmedia`.
#
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function

import argparse
from gettext import gettext as _

import dmedia
from dmedia.constants import BUS
from dmedia.api import DMedia


BROWSER = 'dmedia/app/browser'

parser = argparse.ArgumentParser(
    description='Manage media files in your dmedia library',
)
parser.add_argument('--version', action='version', version=dmedia.__version__)
parser.add_argument('--browser',
    help='open dmedia HTML5 UI in default browser',
    action='store_true',
    default=False,
)
parser.add_argument('--bus',
    help='DBus bus name; default is %(default)r',
    default=BUS,
)
parser.add_argument('--att',
    help='CouchDB attachment path; default is %(default)r',
    default=BROWSER,
)

args = parser.parse_args()
dm = DMedia(args.bus)

if not dm.has_app():
    print('Oops, cannot import dmedia.webui.app!')
    raise SystemExit(2)


if args.browser:
    url = dm.get_auth_url() + args.att
    import subprocess
    subprocess.check_call(['/usr/bin/xdg-open', url])
    raise SystemExit()


env = dm.get_env()

from dmedia.gtkui.widgets import CouchView
from gi.repository import Gtk, GObject

window = Gtk.Window()
window.set_title(_('Media Browser'))
window.set_default_size(960, 540)
window.connect('destroy', Gtk.main_quit)

container = Gtk.VBox()
container.show()

#TODO: move menus into separate file(s) to make them easier to edit

actions = {"close" : Gtk.main_quit}

menu = [
    {
        "type" : "menu",
        "label" : "File",
        "items" : [
            {"label" : "Close", "type" : "action", "action" : "close"},
            {"label" : "anothermenu", "type" : "menu", "items" : [{"label" : "Close", "type" : "action", "action" : "close"}, {"label" : "Close", "type" : "action", "action" : "close"}]}
        ]
    },
    {"label" : "anothermenu", "type" : "menu", "items" : [{"label" : "Close", "type" : "action", "action" : "close"}, {"label" : "Close", "type" : "action", "action" : "close"}]}
]

menubar = Gtk.MenuBar()
menubar.show()

file_menu = Gtk.Menu()
file_menu.show()

def add_items_to_menu(menu, *items):
    for item in items:
        menu.append(item)

def make_menu(menu):
    items = []
    for i in menu:
        item = Gtk.MenuItem()
        item.show()
        item.set_label(i["label"])
        if i["type"] == "menu":
            submenu = Gtk.Menu()
            submenu.show()
            add_items_to_menu(submenu, *make_menu(i["items"]))
            item.set_submenu(submenu)
        elif i["type"] == "action":
            item.connect("activate", actions[i["action"]])
        items.append(item)
    return items

add_items_to_menu(menubar, *make_menu(menu))

container.pack_start(menubar, False, False, 0)

scroll = Gtk.ScrolledWindow()
scroll.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
container.add(scroll)

window.add(container)

view = CouchView(env['url'], env.get('oauth'))
scroll.add(view)

window.show_all()
view.load_uri(env['url'] + args.att)

Gtk.main()
