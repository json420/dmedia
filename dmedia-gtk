#!/usr/bin/python3

# dmedia: distributed media library
# Copyright (C) 2011 Novacut Inc
# 
# This file is part of `dmedia`.
# 
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
# 
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
# 
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

import json
import logging
import sys
from copy import deepcopy
import weakref

from userwebkit import BaseApp
from microfiber import NotFound

import dmedia
from dmedia.util import get_project_db
from dmedia import views
from dmedia import schema
from dmedia.gtk import GObject, Gtk
from dmedia.gtk.util import Timer
from dmedia.service.dbus import Ejector, Formatter, WeakMethod
from dmedia.importer import ImportManager

try:
    from dmedia.gtk.ubuntu import UnityImportUX
except ImportError:
    UnityImportUX = None


log = logging.getLogger()


class WeakMethod:
    def __init__(self, inst, method):
        self.proxy = weakref.proxy(inst)
        self.method = method

    def __call__(self, *args):
        return getattr(self.proxy, self.method)(*args)


class Importer:
    def __init__(self, env, proxy, hub):
        super().__init__()
        self.env = env
        self.blocking = False
        self.cards = []
        self.proxy = proxy
        self.proxy.connect_to_signal('CardAdded',
            WeakMethod(self, 'on_CardAdded')
        )
        self.hub = hub
        self.hub.connect('batch_finished',
            WeakMethod(self, 'on_batch_finished')
        )
        self.manager = ImportManager(env, WeakMethod(self, 'callback'))

    def callback(self, signal, args):
        GObject.idle_add(self.hub.send, signal, *args)

    def on_batch_finished(self, hub, batch_id, stats, copies, msg):
        Worker = (Formatter if copies >= 2 else Ejector)
        # FIXME: for now, we never use the Formatter just in case.
        Worker = Ejector
        self.blocking = True
        self.batch_id = batch_id
        self.copies = copies
        self.stats = stats
        self.msg = msg
        self.workers = dict(
            (obj, Worker(obj, self.on_complete))
            for obj in self.cards
        )
        self.cards = []
        for worker in self.workers.values():
            worker.run()

    def on_complete(self, worker, obj):
        log.info('Completed: %r', worker)
        w = self.workers.pop(obj)
        assert worker is w
        if len(self.workers) == 0:
            self.blocking = False
            log.info('emitting batch_finalized to UI')
            self.hub.send('batch_finalized',
                self.batch_id, self.stats, self.copies, self.msg
            )

    def on_CardAdded(self, obj, mount):
        if self.blocking:
            log.warning('Blocking, ignoring card-insert %r', obj)
            return
        log.info('CardAdded %r %r', obj, mount)
        self.cards.append(obj)
        self.manager.start_import(mount)


class Replay:
    def __init__(self, filename, hub):
        self.events = json.load(open(filename, 'r'))
        assert isinstance(self.events, list)
        self.i = 0
        self.hub = hub
        self.timer = Timer(1, self.on_timer)
        self.timer.start()

    def on_timer(self):
        if self.i >= len(self.events):
            self.timer.stop()
            return
        (signal, args) = self.events[self.i]
        self.i += 1
        self.hub.send(signal, *args)


WELCOMED_ID = '_local/welcomed'


class App(BaseApp):
    name = 'dmedia'
    dbname = schema.DB_NAME
    version = dmedia.__version__
    title = 'Dmedia'
    splash = 'splash.html'
    page = 'index.html'
    title = 'Dmedia'
    proxy_bus = dmedia.BUS

    signals = {
        'create_project': ['title'],
        'project_created': ['project_id', 'title'],
        'start_importer': ['project_id'],
        'importer_started': ['project_db_name'],
        'stop_importer': [],
        'importer_stopped': [],

        'welcome_complete': [],
        'batch_started': ['batch_id'],
        'import_started': ['basedir', 'import_id', 'extra'],
        'import_scanned': ['basedir', 'import_id', 'total_count', 'total_size'],
        'import_thumbnail': ['basedir', 'import_id', 'doc_id'],
        'batch_progress': ['count', 'total_count', 'size', 'total_size'],
        'batch_finished': ['batch_id', 'stats', 'copies', 'notification'],
        'batch_finalized': ['batch_id', 'stats', 'copies', 'notification'],
        'error': ['error_dict'],
    }

    def extend_parser(self, parser):
        parser.add_option('--replay',
            help='replay import',
            action='store_true',
            default=False,
        )

    def connect_hub_signals(self, hub):
        self.importer = None
        hub.connect('create_project', self.on_create_project)
        hub.connect('start_importer', self.on_start_importer)
        hub.connect('stop_importer', self.on_stop_importer)
        hub.connect('error', self.on_error)
        hub.connect('welcome_complete', self.on_welcome_complete)

    def choose_starting_page(self):
        _id = '_local/welcomed'
        try:
            self.db.get(WELCOMED_ID)
            return self.page
        except NotFound:
            return 'welcome.html'

    def dmedia_resolver(self, uri):
        return self.proxy.ResolveURI(uri)

    def on_welcome_complete(self, hub):
        self.db.post({'_id': WELCOMED_ID})
        self.load_page(self.page)

    def post_env_init(self):
        if self.options.replay:
            self.create_ux()
            self._replay = Replay('signals.json', self.hub)
        for row in self.db.view('project', 'atime')['rows']:
            get_project_db(row['id'], self.env, True)

    def create_ux(self):
        if UnityImportUX is not None:
            self.ux = UnityImportUX(self.hub)
            assert sys.getrefcount(self.ux) == 2

    def destroy_ux(self):
        self.ux = None

    def on_error(self, hub, error):
        self.window.present()
        dialog = Gtk.MessageDialog(
            self.window,
            0,
            Gtk.MessageType.ERROR,
            Gtk.ButtonsType.CLOSE,
            'An error occured during the import!\nYour files have not been imported!'
        )
        dialog.run()
        dialog.destroy()

    def on_start_importer(self, dub, project_id):
        env = deepcopy(self.env)
        env['project_id'] = project_id
        self.importer = Importer(env, self.proxy, self.hub)
        assert sys.getrefcount(self.importer) == 2
        self.create_ux()
        self.hub.send('importer_started', schema.project_db_name(project_id))

    def on_stop_importer(self, hub):
        self.importer = None
        self.ux = None
        self.hub.send('importer_stopped')

    def on_create_project(self, hub, title):
        print(repr(title))
        doc = schema.create_project(title)
        self.db.post(doc)
        project = get_project_db(doc['_id'], self.env, True)
        project.save(doc)
        self.hub.send('project_created', doc['_id'], doc['title'])


dmedia.configure_logging()      
app = App()
app.run()
