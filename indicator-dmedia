#!/usr/bin/env python

# Authors:
#   David Green <david4dev@gmail.com>
#
# dmedia: distributed media library
# Copyright (C) 2010 Jason Gerard DeRose <jderose@novacut.com>
#
# This file is part of `dmedia`.
#
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.

import dmedialib.client
import pynotify
import appindicator
import gconf
from gettext import gettext as _
import gtk
from subprocess import PIPE, Popen


class IndicatorGUI(object):
    def __init__(self, busname=None, connect=True):
        self.client = dmedialib.client.Client()
        self.indicator = appindicator.Indicator(
            "indicator-dmedia",
            "/usr/share/pixmaps/dmedia.svg",
            appindicator.CATEGORY_APPLICATION_STATUS
        )
        self.indicator.set_status(appindicator.STATUS_ACTIVE)
        self.imports = {
            #base : [completed, total]
        }
        for base in self.client.list_imports():
            self.imports[base] = ['0', '0']
        self.client.version()
        self.client.connect('import_started', self.on_import_started)
        self.client.connect('import_finished', self.on_import_finished)
        self.client.connect('import_progress', self.on_import_progress)
        self.update_menu_items()
        gtk.main()


    def device_type(self, base):
        dev = Popen(
            [
                "df",
                base
            ],
            stdout=PIPE
        ).communicate()[0].split(
            "\n"
        )[1].split(
            ' '
        )[0]

        includes = lambda string: dev.find(string) > -1

        if includes('sr'):
            return 'optical'
        if includes('raw1394') or includes('dv1394'):
            return 'firewire'
        if includes('mmcblk'):
            return 'card'
        if includes('sda') or includes('hda'):
            return 'local'

        #default guess
        return 'usb'


    def get_icon(self, device_type):
        if device_type == 'firewire':
            return 'notification-device-firewire'

        #default icon
        return 'notification-device-usb'


    def menu_items(self):
        for base in self.imports:
            yield(_("Importing") + "  " + base + "  (" + '/'.join(self.imports[base]) + ")")


    def update_menu_items(self):
        print "updating menu"
        self.menu = gtk.Menu()
        for text in self.menu_items():
            item = gtk.MenuItem(text)
            item.show()
            self.menu.append(item)
        self.indicator.set_menu(self.menu)


    def on_import_started(self, signal, base):
        print("import started %s" % base)
        notification = pynotify.Notification(_("Searching for new files"), base, self.get_icon(self.device_type(base)))
        notification.set_hint_string('append', '')
        print("Notifying... %s" % str(notification))
        print str(notification.show())
        self.imports[base] = ['0', '0']
        self.update_menu_items()

    def on_import_finished(self, signal, base):
        print("import finished %s" % base)
        notification = pynotify.Notification(_("Import finished"), base, self.get_icon(self.device_type(base)))
        print("Notifying... %s" % str(notification))
        print str(notification.show())
        del(self.imports[base])
        self.update_menu_items()

    def on_import_progress(self, signal, base, completed, total):
        self.imports[base] = [str(completed), str(total)]
        print(base + ' ' + str(completed) + '/' + str(total))
        self.update_menu_items()


if __name__ == '__main__':
    IndicatorGUI()
    client = gconf.client_get_default()
    client.set_bool('/apps/dmedia/indicator-is-running', 0)
