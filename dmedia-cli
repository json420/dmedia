#!/usr/bin/env python

# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>
#   David Green <david4dev@gmail.com>
#
# dmedia: distributed media library
# Copyright (C) 2010, 2011 Jason Gerard DeRose <jderose@novacut.com>
#
# This file is part of `dmedia`.
#
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.


"""
Command line tool for talking to dmedia DBus services.
"""

from __future__ import print_function

import argparse
import json

import dbus

import dmedia
from dmedia.constants import BUS, IFACE


parser = argparse.ArgumentParser(
    description='Execute methods on dmedia DBus services',
)
parser.add_argument('--version', action='version', version=dmedia.__version__)
parser.add_argument('--bus',
    help='DBus bus name; default is %(default)r',
    default=BUS,
)


subparsers = parser.add_subparsers(
    dest='cmd',
    title='Commands from {!r}'.format(BUS)
)


subparsers.add_parser('Kill',
    help='shutdown `dmedia-service`',
)

p = subparsers.add_parser('AddFileStore',
    help='shutdown `dmedia-service`',
)
p.add_argument('parentdir',
    help="parent directory, like '/home/username'"
)
def AddFileStore(method, args):
    print(method(args.parentdir))
p.set_defaults(func=AddFileStore)


def default_func(method, args):
    print(method())

args = parser.parse_args()
func = getattr(args, 'func', default_func)
conn = dbus.SessionBus()
proxy = conn.get_object(args.bus, '/')
method = proxy.get_dbus_method(args.cmd, dbus_interface=IFACE)
func(method, args)
