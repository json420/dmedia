#!/usr/bin/env python

# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>
#   David Green <david4dev@gmail.com>
#
# dmedia: distributed media library
# Copyright (C) 2010, 2011 Jason Gerard DeRose <jderose@novacut.com>
#
# This file is part of `dmedia`.
#
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.


"""
Command line tool for talking to dmedia DBus services.
"""

from __future__ import print_function

import argparse
import json

import dmedia
from dmedia.constants import BUS


parser = argparse.ArgumentParser(
    description='Execute methods on dmedia DBus services',
)
parser.add_argument('--version', action='version', version=dmedia.__version__)
parser.add_argument('--bus',
    help='DBus bus name; default is %(default)r',
    default=BUS,
)

subparsers = parser.add_subparsers(
    title='Commands from {!r}'.format(BUS)
)


p_version = subparsers.add_parser('version',
    help='get version of running dmedia service',
)
def do_version(dm, args):
    print(
        '{} {}'.format(args.bus, dm.version())
    )
p_version.set_defaults(func=do_version)


p_kill = subparsers.add_parser('kill',
    help='kill `dmedia-service`',
)
def do_kill(dm, args):
    print('Killing {}...'.format(args.bus))
    dm.kill()
p_kill.set_defaults(func=do_kill)


p_get_env = subparsers.add_parser('get-env',
    help='echo out JSON encoded env dict',
)
def do_get_env(dm, args):
    print(json.dumps(dm.get_env(), sort_keys=True, indent=2))
p_get_env.set_defaults(func=do_get_env)


p_get_auth_url = subparsers.add_parser('get-auth-url',
    help='echo desktopcouch basic auth URL',
)
def do_get_auth_url(dm, args):
    print(dm.get_auth_url())
p_get_auth_url.set_defaults(func=do_get_auth_url)


p_has_app = subparsers.add_parser('has-app',
    help='show whether the WebUI app is available',
)
def do_has_app(dm, args):
    print(bool(dm.has_app()))
p_has_app.set_defaults(func=do_has_app)


p_upload = subparsers.add_parser('upload',
    help='upload a file to a remote store',
)
def do_upload(dm, args):
    print(bool(dm.upload(args.file_id, args.store_id)))
p_upload.set_defaults(func=do_upload)
p_upload.add_argument('file_id',
    help="A dmedia/file ID like 'MIKQR5URC4YMW7MJGVIVJR3AZODIC5WN'"
)
p_upload.add_argument('store_id',
    help="A dmedia/store ID like 'PKME2PIIZFXVNJEG6OQ3IFON'"
)

p_download = subparsers.add_parser('download',
    help='download a file not available locally',
)
def do_download(dm, args):
    print(bool(dm.download(args.file_id, args.store_id)))
p_download.set_defaults(func=do_download)
p_download.add_argument('file_id',
    help="A dmedia/file ID like 'MIKQR5URC4YMW7MJGVIVJR3AZODIC5WN'"
)
p_download.add_argument('store_id',
    help="A dmedia/store ID like 'PKME2PIIZFXVNJEG6OQ3IFON'"
)

p_list_transfers = subparsers.add_parser('list-transfers',
    help='list uploads and downloads in progress',
)
def do_list_transfers(dm, args):
    for t in dm.list_transfers():
        print(t)
p_list_transfers.set_defaults(func=do_list_transfers)


args = parser.parse_args()
from dmedia.api import DMedia
dm = DMedia(args.bus)
args.func(dm, args)
