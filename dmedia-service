#!/usr/bin/python3

# dmedia: distributed media library
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `dmedia`.
#
# `dmedia` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

"""
Hacky shim till it's possible to implement DBus servers in PyGI.

Note that because this script must be Python2, it can't import anything from the
`dmedia` package as that will only be installed under Python3.
"""

import argparse
import logging
import time
import sys
import json

import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
from microfiber import Database, NotFound
from gi.repository import GObject

import dmedia
from dmedia.core import Core, start_file_server
from dmedia.service.avahi import Avahi

BUS = 'org.freedesktop.DMedia'
IFACE = BUS
log = logging.getLogger()

GObject.threads_init()
DBusGMainLoop(set_as_default=True)
session = dbus.SessionBus()


class Service(dbus.service.Object):
    httpd = None
    avahi = None

    def __init__(self, bus):
        self.bus = bus
        self.mainloop = GObject.MainLoop()
        log.info('DBus: binding to %r', bus)
        super().__init__(session, object_path='/')
        self.busname = dbus.service.BusName(bus, session)

    def start_core(self):
        self.dc3 = session.get_object('org.freedesktop.DC3', '/')
        env = json.loads(self.dc3.GetEnv())
        self.core = Core(env)
        self.env_s = json.dumps(self.core.env, sort_keys=True)
        if len(self.core.stores) == 0:
            self.core.add_filestore('/home')
 
    def start_httpd(self):
        (self.httpd, self.port) = start_file_server(self.core.env)
        self.avahi = Avahi(self.core.env, self.port)
        self.avahi.run()

    def run(self):
        self.start_core()
        self.start_httpd()
        self.mainloop.run()

    def kill(self):
        if self.avahi is not None:
            self.avahi.free()
        if self.httpd is not None:
            self.httpd.terminate()
            self.httpd.join()
        self.mainloop.quit()

    @dbus.service.method(IFACE, in_signature='', out_signature='s')
    def Version(self):
        """
        Return dmedia version.
        """
        return dmedia.__version__

    @dbus.service.method(IFACE, in_signature='', out_signature='')
    def Kill(self):
        """
        Kill the `dmedia-service` process.
        """
        self.kill()

    @dbus.service.method(IFACE, in_signature='', out_signature='s')
    def GetEnv(self):
        """
        Return dmedia env as JSON string.
        """
        return self.env_s

    @dbus.service.method(IFACE, in_signature='s', out_signature='')
    def AddFileStore(self, parentdir):
        pass

    @dbus.service.method(IFACE, in_signature='s', out_signature='')
    def RemoveFileStore(self, parentdir):
        pass


parser = argparse.ArgumentParser(
    description='DBus service @{}'.format(BUS),
)
parser.add_argument('--version', action='version', version=dmedia.__version__)
parser.add_argument('--bus',
    default=BUS,
    help='DBus bus name; default is %(default)r',
)
args = parser.parse_args()
dmedia.configure_logging()


service = Service(args.bus)
try:
    service.run()
finally:
    service.kill()
