#!/usr/bin/python3

# dmedia: distributed media library
# Copyright (C) 2011 Novacut Inc
#
# This file is part of `dmedia`.
#
# `dmedia` is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

"""
The real Python3 dmedia DBus service (well, almost).
"""

import sys
import json
from os import path
import optparse
import logging

from gi.repository import GObject

import dmedia
from dmedia.service import dbus
from dmedia.service.dbus import session, UDisks
from dmedia.core import Core, start_file_server

GObject.threads_init()
log = logging.getLogger()


class DMedia:
    def __init__(self, bus):
        self.mainloop = GObject.MainLoop()
        dc3 = session.get('org.freedesktop.DC3', '/')
        self.env_s = dc3.GetEnv()
        self.core = Core(json.loads(self.env_s))
        self._fwd = {
            'AddFileStore': self.AddFileStore,
            'RemoveFileStore': self.RemoveFileStore,
            'Kill': self.Kill,
        }
        if bus:
            log.info('Listing to forwards from %r', bus)
            self.proxy = session.get(bus, '/', 'org.freedesktop.DMedia')
            self.proxy.connect('g-signal', self.on_g_signal)
        self.avahi = dbus.system.get(
            'org.freedesktop.Avahi',
            '/',
            'org.freedesktop.Avahi.Server'
        )
        self._peers = {}
        self.udisks = UDisks()
        self.udisks.connect('store_added', self.on_store_added)
        self.udisks.connect('store_removed', self.on_store_removed)
        self.udisks.monitor()

    def run(self):
        (self.httpd, self.port) = start_file_server(self.core.env)
        self.group = dbus.system.get(
            'org.freedesktop.Avahi',
            self.avahi.EntryGroupNew(),
            'org.freedesktop.Avahi.EntryGroup'
        )
        self.group.AddService('(iiussssqaay)',
            -1,  # Interface
            0,  # Protocol -1 = both, 0 = ipv4, 1 = ipv6
            0,  # Flags
            self.core.machine_id,
            '_dmedia._tcp',
            '',  # Domain, default to .local
            '',  # Host, default to localhost
            self.port,  # Port
            None  # TXT record
        )
        self.group.Commit()
        browser_path = self.avahi.ServiceBrowserNew('(iissu)',
            -1,  # Interface
            0,  # Protocol -1 = both, 0 = ipv4, 1 = ipv6
            '_dmedia._tcp',
            'local',
            0  # Flags
        )
        self.browser = dbus.system.get(
            'org.freedesktop.Avahi',
            browser_path,
            'org.freedesktop.Avahi.ServiceBrowser'
        )
        self.browser.connect('g-signal', self.on_browser_g_signal)
        self.mainloop.run()

    def on_store_added(self, udisks, obj, parentdir, partition, drive):
        log.info('UDisks store_added: %r', parentdir)
        try:
            self.AddFileStore(parentdir)
        except Exception:
            log.exception('Could not add FileStore %r', parentdir)

    def on_store_removed(self, udisks, obj, parentdir):
        log.info('UDisks store_removed: %r', parentdir)
        try:
            self.RemoveFileStore(parentdir)
        except Exception:
            log.exception('Could not remove FileStore %r', parentdir)

    def on_g_signal(self, proxy, sender, signal, params):
        if signal.startswith('Fwd'):
            name = signal[3:]
            args = params.unpack()
            try:
                self._fwd[name](*args)
            except KeyError:
                pass

    def on_browser_g_signal(self, proxy, sender, signal, params):
        if signal == 'ItemNew':
            (interface, protocol, name, _type, domain, flags) = params.unpack()
            if name != self.core.machine_id:  # Ignore what we publish ourselves
                (ip, port) = self.avahi.ResolveService('(iisssiu)',
                    interface, protocol, name, _type, domain, -1, 0
                )[7:9]
                url = 'http://{}:{}/'.format(ip, port)
                log.info('New peer %r at %r', name, url)
                self._peers[name] = url
        elif signal == 'ItemRemove':
            (interface, protocol, name, _type, domain, flags) = params.unpack()
            log.info('Removing peer %r', name)
            try:
                del self._peers[name]
            except KeyError:
                pass

    def AddFileStore(self, parentdir):
        self.core.add_filestore(path.abspath(parentdir))

    def RemoveFileStore(self, parentdir):
        self.core.remove_filestore(path.abspath(parentdir))

    def Kill(self):
        self.group.Reset()
        self.httpd.terminate()
        self.httpd.join()
        self.mainloop.quit()


parser = optparse.OptionParser(
	usage='Usage: %prog FILE',
	version=dmedia.__version__,
)
parser.add_option('--bus',
    help='If provided, expect Python2 shim on this DBus bus',
)
(options, args) = parser.parse_args()

dmedia.configure_logging()
service = DMedia(options.bus)
service.run()
service.Kill()
