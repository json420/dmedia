#!/usr/bin/python3

# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>
#
# dmedia: distributed media library
# Copyright (C) 2011 Jason Gerard DeRose <jderose@novacut.com>
#
# This file is part of `dmedia`.
#
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.

"""
GStreamer-based transcoder.
"""

import sys
from os import path
import json

import gi
gi.require_version('Gst', '1.0')
from gi.repository import GLib, Gst


GLib.threads_init()
Gst.init(None)


def make_element(desc):
    """
    Create a GStreamer element and set its properties.

    For example:

    >>> enc = make_element({'name': 'theoraenc'})
    >>> enc.get_property('quality')
    48

    Or with properties:

    >>> enc = make_element({'name': 'theoraenc', 'props': {'quality': 40}})
    >>> enc.get_property('quality')
    40

    """
    el = Gst.ElementFactory.make(desc['name'], None)
    if el is None:
        raise Exception(desc['name'])
    if desc.get('props'):
        for (key, value) in desc['props'].items():
            el.set_property(key, value)
    return el


def caps_string(mime, caps):
    accum = [mime]
    if caps:
        for key in sorted(caps):
            accum.append('{}={}'.format(key, caps[key]))
    return ', '.join(accum)


def make_caps(mime, caps):
    return Gst.caps_from_string(caps_string(mime, caps))


class EncoderBin(Gst.Bin):
    """
    Base class for `AudioEncoder` and `VideoEncoder`.
    """

    def __init__(self, d):
        super().__init__()
        self._d = d

        # Create elements
        self._q1 = self._make('queue')
        self._q2 = self._make('queue')
        self._q3 = self._make('queue')
        self._enc = self._make(d['encoder'])

        f = d.get('filter')
        if f is None:
            self._q2.link(self._enc)
        else:
            self._q2.link_filtered(self._enc, make_caps(self._mime, f))
        self._enc.link(self._q3)

        # Ghost Pads
        self.add_pad(
            Gst.GhostPad.new('sink', self._q1.get_static_pad('sink'))
        )
        self.add_pad(
            Gst.GhostPad.new('src', self._q3.get_static_pad('src'))
        )

    def __repr__(self):
        return '{}({!r})'.format(self.__class__.__name__, self._d)

    def _make(self, desc, props=None):
        """
        Create gst element, set properties, and add to this bin.
        """
        if isinstance(desc, str):
            desc = {'name': desc, 'props': props}
        el = make_element(desc)
        self.add(el)
        return el


class AudioEncoder(EncoderBin):
    _mime = 'audio/x-raw'

    def __init__(self, d):
        super().__init__(d)

        # Create elements:
        self._conv = self._make('audioconvert')
        self._rsp = self._make('audioresample', {'quality': 10})
        self._rate = self._make('audiorate')

        # Link elements:
        self._q1.link(self._conv)
        self._conv.link(self._rsp)
        self._rsp.link(self._rate)
        self._rate.link(self._q2)

    def get_stats(self):
        d = dict(
            (n, self._rate.get_property(n))
            for n in ('in', 'out', 'add', 'drop')
        )
        d['consistent'] = bool(d['in'] + d['add'] - d['drop'] == d['out'])
        return {'samples': d}


class VideoEncoder(EncoderBin):
    _mime = 'video/x-raw'

    def __init__(self, d):
        super().__init__(d)

        # Create elements:
        self._scale = self._make('videoscale', {'method': 3})
        self._color = self._make('videoconvert')
        #self._rate = self._make('videorate')

        # Link elements:
        self._q1.link(self._scale)
        self._scale.link(self._color)
        self._color.link(self._q2)
#        self._color.link(self._rate)
#        self._rate.link(self._q2)

    def get_stats(self):
        return {'frames': {}}
        d = dict(
            (n, self._rate.get_property(n))
            for n in ('in', 'out', 'duplicate', 'drop')
        )
        d['consistent'] = bool(d['in'] + d['duplicate'] - d['drop'] == d['out'])
        return {'frames': d}


class Transcoder(object):
    def __init__(self, job):
        """
        Initialize.

        :param job: a ``dict`` describing the transcode to perform.
        :param fs: a `FileStore` instance in which to store transcoded file
        """
        assert isinstance(job, dict)
        self.job = job
        self.mainloop = GLib.MainLoop()
        self.pipeline = Gst.Pipeline()
        self.doc = {}

        # Create bus and connect several handlers
        self.bus = self.pipeline.get_bus()
        self.bus.add_signal_watch()
        self.bus.connect('message::eos', self.on_eos)
        self.bus.connect('message::error', self.on_error)

        # Create elements
        self.src = Gst.ElementFactory.make('filesrc', None)
        self.dec = Gst.ElementFactory.make('decodebin', None)
        self.mux = Gst.ElementFactory.make(job['mux'], None)
        self.sink = Gst.ElementFactory.make('filesink', None)

        # Set properties
        self.src.set_property('location', job['src'])
        self.sink.set_property('location', job['dst'])

        # Connect handler for 'pad-added' signal
        self.dec.connect('pad-added', self.on_pad_added)

        # Add elements to pipeline
        self.pipeline.add(self.src)
        self.pipeline.add(self.dec)
        self.pipeline.add(self.mux)
        self.pipeline.add(self.sink)

        # Link *some* elements
        # This is completed in self.on_new_decoded_pad()
        self.src.link(self.dec)
        self.mux.link(self.sink)

        self.audio = None
        self.video = None

    def run(self):
        self.pipeline.set_state(Gst.State.PLAYING)
        self.mainloop.run()

    def kill(self):
        self.pipeline.set_state(Gst.State.NULL)
        self.mainloop.quit()

    def link_pad(self, pad, key):
        if key in self.job:
            klass = {'audio': AudioEncoder, 'video': VideoEncoder}[key]
            el = klass(self.job[key])
        else:
            el = Gst.ElementFactory.make('fakesink', None)
        self.pipeline.add(el)
        pad.link(el.get_static_pad('sink'))
        if key in self.job:
            el.link(self.mux)
        el.set_state(Gst.State.PLAYING)
        return el

    def on_pad_added(self, element, pad):
        string = pad.query_caps(None).to_string()
        if string.startswith('audio/'):
            assert self.audio is None
            self.audio = self.link_pad(pad, 'audio')
        elif string.startswith('video/'):
            assert self.video is None
            self.video = self.link_pad(pad, 'video')

    def on_eos(self, bus, msg):
        for bin in (self.video, self.audio):
            if isinstance(bin, EncoderBin):
                self.doc.update(bin.get_stats())
        self.kill()

    def on_error(self, bus, msg):
        error = msg.parse_error()[1]
        self.kill()
        print(error)
        sys.exit(2)


def exit(msg):
    print('ERROR: ' + msg)
    sys.exit(1)


if len(sys.argv) != 2:
    exit('must provide JSON')
job = json.loads(sys.argv[1])

src = job['src']
if not path.isfile(src):
    exit('SRC is not a file: {!r}'.format(src))

t = Transcoder(job)
t.run()
print(json.dumps(t.doc, sort_keys=True, indent=4))

