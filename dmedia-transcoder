#!/usr/bin/python

# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>
#
# dmedia: distributed media library
# Copyright (C) 2011 Jason Gerard DeRose <jderose@novacut.com>
#
# This file is part of `dmedia`.
#
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.

"""
GStreamer-based transcoder.
"""

import sys
from os import path

import gobject
import gst


def make_element(desc):
    """
    Create a GStreamer element and set its properties.

    For example:

    >>> enc = make_element({'name': 'theoraenc'})
    >>> enc.get_property('quality')
    48

    Or with properties:

    >>> enc = make_element({'name': 'theoraenc', 'props': {'quality': 40}})
    >>> enc.get_property('quality')
    40

    """
    el = gst.element_factory_make(desc['name'])
    if desc.get('props'):
        for (key, value) in desc['props'].iteritems():
            el.set_property(key, value)
    return el


def caps_string(desc):
    """
    Build a GStreamer caps string.

    For example:

    >>> desc = {'mime': 'video/x-raw-yuv'}
    >>> caps_string(desc)
    'video/x-raw-yuv'

    Or with specific caps:

    >>> desc = {
    ...     'mime': 'video/x-raw-yuv',
    ...     'caps': {'width': 800, 'height': 450},
    ... }
    ...
    >>> caps_string(desc)
    'video/x-raw-yuv, height=450, width=800'

    """
    accum = [desc['mime']]
    if desc.get('caps'):
        caps = desc['caps']
        for key in sorted(caps):
            accum.append('{}={}'.format(key, caps[key]))
    return ', '.join(accum)


def make_caps(desc):
    if not desc:
        return None
    return gst.caps_from_string(caps_string(desc))


class EncoderBin(gst.Bin):
    """
    Base class for `AudioEncoder` and `VideoEncoder`.
    """

    def __init__(self, d):
        super(EncoderBin, self).__init__()
        self._d = d

        # Create elements
        self._q1 = self._make('queue')
        self._q2 = self._make('queue')
        self._q3 = self._make('queue')
        self._enc = self._make(d['encoder'])

        # Create the filter caps
        self._caps = make_caps(d.get('filter'))

        # Link elements
        if self._caps is None:
            self._q2.link(self._enc)
        else:
            self._q2.link(self._enc, self._caps)
        self._enc.link(self._q3)

        # Ghost Pads
        self.add_pad(
            gst.GhostPad('sink', self._q1.get_pad('sink'))
        )
        self.add_pad(
            gst.GhostPad('src', self._q3.get_pad('src'))
        )

    def __repr__(self):
        return '{}({!r})'.format(self.__class__.__name__, self._d)

    def _make(self, desc, props=None):
        """
        Create gst element, set properties, and add to this bin.
        """
        if isinstance(desc, basestring):
            desc = {'name': desc, 'props': props}
        el = make_element(desc)
        self.add(el)
        return el


class AudioEncoder(EncoderBin):
    def __init__(self, d):
        super(AudioEncoder, self).__init__(d)

        # Create elements:
        self._conv = self._make('audioconvert')
        self._rsp = self._make('audioresample', {'quality': 10})
        self._rate = self._make('audiorate')

        # Link elements:
        gst.element_link_many(
            self._q1, self._conv, self._rsp, self._rate, self._q2
        )


class VideoEncoder(EncoderBin):
    def __init__(self, d):
        super(VideoEncoder, self).__init__(d)

        # Create elements:
        self._scale = self._make('ffvideoscale', {'method': 10})
        self._color = self._make('ffmpegcolorspace')
        self._rate = self._make('videorate')

        # Link elements:
        gst.element_link_many(self._q1, self._scale, self._color, self._rate, self._q2)


class Transcoder(object):
    def __init__(self, job):
        """
        Initialize.

        :param job: a ``dict`` describing the transcode to perform.
        :param fs: a `FileStore` instance in which to store transcoded file
        """
        assert isinstance(job, dict)
        self.job = job
        self.mainloop = gobject.MainLoop()
        self.pipeline = gst.Pipeline()

        # Create bus and connect several handlers
        self.bus = self.pipeline.get_bus()
        self.bus.add_signal_watch()
        self.bus.connect('message::eos', self.on_eos)
        self.bus.connect('message::error', self.on_error)

        # Create elements
        self.src = gst.element_factory_make('filesrc')
        self.dec = gst.element_factory_make('decodebin2')
        self.mux = gst.element_factory_make(job['mux'])
        self.sink = gst.element_factory_make('filesink')

        # Set properties
        self.src.set_property('location', job['src'])
        self.sink.set_property('location', job['dst'])

        # Connect handler for 'new-decoded-pad' signal
        self.dec.connect('new-decoded-pad', self.on_new_decoded_pad)

        # Add elements to pipeline
        self.pipeline.add(self.src, self.dec, self.mux, self.sink)

        # Link *some* elements
        # This is completed in self.on_new_decoded_pad()
        self.src.link(self.dec)
        self.mux.link(self.sink)

        self.audio = None
        self.video = None

    def run(self):
        self.pipeline.set_state(gst.STATE_PLAYING)
        self.mainloop.run()

    def kill(self):
        self.pipeline.set_state(gst.STATE_NULL)
        self.pipeline.get_state()
        self.mainloop.quit()

    def link_pad(self, pad, name, key):
        if key in self.job:
            klass = {'audio': AudioEncoder, 'video': VideoEncoder}[key]
            el = klass(self.job[key])
        else:
            el = gst.element_factory_make('fakesink')
        self.pipeline.add(el)
        pad.link(el.get_pad('sink'))
        if key in self.job:
            el.link(self.mux)
        el.set_state(gst.STATE_PLAYING)
        return el

    def on_new_decoded_pad(self, element, pad, last):
        name = pad.get_caps()[0].get_name()
        if name.startswith('audio/'):
            assert self.audio is None
            self.audio = self.link_pad(pad, name, 'audio')
        elif name.startswith('video/'):
            assert self.video is None
            self.video = self.link_pad(pad, name, 'video')

    def on_eos(self, bus, msg):
        self.kill()

    def on_error(self, bus, msg):
        error = msg.parse_error()[1]
        self.kill()
        print(error)
        sys.exit(2)


def exit(msg):
    print('ERROR: ' + msg)
    sys.exit(1)


if len(sys.argv) != 3:
    exit('must provide SRC and DST')
(src, dst) = sys.argv[1:3]
if not path.isfile(src):
    exit('SRC is not a file: {!r}'.format(src))


job = {
    'src': src,
    'dst': dst,
    'mux': 'webmmux',
    'video': {
        'encoder': {
            'name': 'vp8enc',
            'props': {
                'quality': 7,
                'max-keyframe-distance': 30,
                'speed': 1,
                'threads': 3,
            },
        },
        'filter': {
            'mime': 'video/x-raw-yuv',
            'caps': {'width': 640, 'height': 360},
        },
    },
    'audio': {
        'encoder': {
            'name': 'vorbisenc',
            'props': {'quality': 0.2},
        },
    },
}
t = Transcoder(job)
t.run()
