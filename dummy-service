#!/usr/bin/python3

import optparse
from os import path

import dbus
from dbus.mainloop.glib import DBusGMainLoop
import dbus.service
from gi.repository import GLib


DBusGMainLoop(set_as_default=True)
GLib.threads_init()
BUS = 'dummy.novacut.Dmedia'
IFACE = 'com.novacut.Dmedia'
session = dbus.SessionBus()
mainloop = GLib.MainLoop()


FLAG_RESOLVED = dbus.Byte(0)
FLAG_UNAVAILABLE = dbus.Byte(1)
FLAG_UNKNOWN = dbus.Byte(2)
FLAG_BAD_ID = dbus.Byte(3)


class Dmedia(dbus.service.Object):
    def __init__(self, busname):
        super().__init__(busname, object_path='/')

    @dbus.service.method(IFACE, in_signature='', out_signature='')
    def Kill(self):
        mainloop.quit()

    @dbus.service.method(IFACE, in_signature='', out_signature='')
    def Resolve1(self):
        pass

    @dbus.service.method(IFACE, in_signature='s', out_signature='s')
    def Resolve2(self, _id):
        return _id

    @dbus.service.method(IFACE, in_signature='s', out_signature='(sys)')
    def Resolve3(self, _id):
        return (_id, FLAG_RESOLVED,
            path.join('/media/MyDrive/.dmedia/files', _id[:2], _id[2:])
        )

    @dbus.service.method(IFACE, in_signature='s', out_signature='(sys)')
    def Resolve4(self, _id):
        return (_id, FLAG_UNAVAILABLE, '')

    @dbus.service.method(IFACE, in_signature='as', out_signature='a(sys)')
    def ResolveMany(self, ids):
        return [
            (_id, FLAG_RESOLVED,
                path.join('/media/MyDrive/.dmedia/files', _id[:2], _id[2:])
            )
            for _id in ids
        ]


parser = optparse.OptionParser()
parser.add_option('--bus',
    help='DBus bus name; default is {!r}'.format(BUS),
    default=BUS
)
(options, args) = parser.parse_args()


busname = dbus.service.BusName(options.bus, session)
service = Dmedia(busname)
mainloop.run()

