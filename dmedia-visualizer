#!/usr/bin/python3

# dmedia: distributed media library
# Copyright (C) 2013 Novacut Inc
# 
# This file is part of `dmedia`.
# 
# `dmedia` is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
# 
# `dmedia` is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
# 
# You should have received a copy of the GNU Affero General Public License along
# with `dmedia`.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Jason Gerard DeRose <jderose@novacut.com>

"""
Visualize the active data safety features in Dmedia.
"""

import os
from os import path
import json

from microfiber import Database, dmedia_env, NotFound, dumps
from userwebkit import BaseApp
from gi.repository import GLib

import dmedia
from dmedia import schema, views

TREE = path.dirname(path.abspath(__file__))

def load_data(name):
    filename = path.join(TREE, name)
    return json.load(open(filename, 'r'))
    

DB_NAME = 'visualizer-1'

#db = Database(DB_NAME, dmedia_env())
#try:
#    db.delete()
#except NotFound:
#    pass
#db.put(None)

#initial = load_data('replay-initial.json')
#initial.append(views.viz_design)
#initial.append({
#    '_id': '_local/dmedia',
#    'machine_id': '4HQQ3DTX336WNAK5HKJ36OKEEURKJBWUS9WXXNV8ERYEAI9X',
#})
#db.save_many(initial)

#changes = load_data('replay-changes.json')


thumbs = Database('thumbnails', dmedia_env())
try:
    thumbs.delete()
except NotFound:
    pass
thumbs.put(None)
thumbs.save_many(load_data('replay-thumbnails.json'))



class App(BaseApp):
    name = 'dmedia'
    dbname = schema.DB_NAME
    version = dmedia.__version__
    title = 'Dmedia Visualizer'
    page = 'visualizer.html'
    proxy_bus = dmedia.BUS
    maximize = True

    def dmedia_resolver(self, _id):
        return self.proxy.Resolve(_id)

    def post_page_init(self, page):
        self.doc_i = 0
        #GLib.timeout_add(500, self.on_timeout)

    def on_timeout(self):
        print('on_timeout', self.doc_i)
        new = changes[self.doc_i]
        try:
            old = db.get(new['_id'])
            new['_rev'] = old['_rev']
        except NotFound:
            pass
        db.save(new)
        self.doc_i += 1
        if self.doc_i >= len(changes):
            return False
        return True


app = App()
app.run()
